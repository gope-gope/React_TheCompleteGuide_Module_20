{"version":3,"sources":["components/quotes/HighlightedQuote.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.js","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetails.js"],"names":["module","exports","HighlightedQuote","props","className","classes","quote","text","author","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","onAddedComment","useEffect","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","QuoteDetail","match","useRouteMatch","console","log","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.0225e332.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2YVg7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1EtrQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2uuKp\",\"loading\":\"NewCommentForm_loading__2d8nB\",\"control\":\"NewCommentForm_control__1qZpd\",\"actions\":\"NewCommentForm_actions__vpb71\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__3Lt6M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3nHz7\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useRef, useEffect } from \"react\";\n\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({\n      commentData: { text: enteredText },\n      quoteId: props.quoteId,\n    });\n  };\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error]);\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const { quoteId } = params;\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet.</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n  console.log(params);\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className=\"centered\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}